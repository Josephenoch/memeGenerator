{"version":3,"sources":["Header.js","MemeGenerator.js","App.js","index.js"],"names":["Header","src","alt","MemeGenerator","props","topInputRef","useRef","imgRef","linkRef","bottomInputRef","canvasRef","downloadRef","useState","noOfClick","setNoOfClick","topText","settopText","bottomText","setbottomText","randomImg","setrandomImg","altText","setaltText","allMemeImgs","setallMemeImgs","topChecked","settopChecked","bottomChecked","setbottomChecked","getLines","ctx","text","maxWidth","words","split","length","single","lines","currentLine","i","word","measureText","width","push","handleChange","e","target","name","checked","current","disabled","useEffect","fetch","then","res","json","data","memes","hasMemes","handleText","value","className","ref","type","placeholder","onChange","onClick","preventDefault","randNum","Math","floor","random","url","height","canvas","img","Image","crossOrigin","context","getContext","drawImage","font","fillStyle","textAlign","upLines","fillText","downLines","image","toDataURL","link","href","download","console","log","click","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e9c86bfa.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nconst Header = (()=>{\r\n    return(\r\n        <header>\r\n            <img src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\" alt=\"TrollFace\"/>\r\n            <p>Meme Generator</p>\r\n        </header>\r\n    )\r\n})\r\n\r\nexport default Header","import React, {useState, useEffect, useRef} from \"react\"\r\n\r\nconst MemeGenerator = ((props)=>{\r\n    const topInputRef = useRef()\r\n    const imgRef = useRef()\r\n    const linkRef = useRef()\r\n    const bottomInputRef = useRef()\r\n    const canvasRef = useRef()\r\n    const downloadRef = useRef()\r\n    const [noOfClick, setNoOfClick] = useState(0)\r\n    const [topText, settopText] = useState(\"\")\r\n    const [bottomText, setbottomText] = useState(\"\")\r\n    const [randomImg, setrandomImg] = useState(\"http://i.imgflip.com/1bij.jpg\")\r\n    const [altText, setaltText] = useState(\"Soon...\")\r\n    const [allMemeImgs, setallMemeImgs] = useState([])\r\n    const [topChecked, settopChecked] = useState(true)\r\n    const [bottomChecked, setbottomChecked] = useState(true)\r\n  \r\n    // function to wrap text in the canvas \r\n    function getLines(ctx, text, maxWidth) {\r\n        var words = text.split(\" \")\r\n        // checking if the sentence is a single word\r\n        if (words.length < 2) {\r\n            words = text.split(\"\");\r\n            var single = true\r\n        }\r\n        var lines = [];\r\n        var currentLine = words[0];\r\n\r\n        for (var i = 1; i < words.length; i++) {\r\n            var word = words[i];\r\n            var width = ctx.measureText(currentLine + \" \" + word).width;\r\n            if (width < maxWidth) {\r\n                if (single) {\r\n                    currentLine += word;\r\n                }\r\n                else {\r\n                    currentLine += \" \" + word;\r\n                }\r\n            } else {\r\n                lines.push(currentLine);\r\n                currentLine = word;\r\n            }\r\n        }\r\n        lines.push(currentLine);\r\n        return lines;\r\n    }\r\n\r\n    const handleGen=((e)=>{\r\n        e.preventDefault()\r\n        const randNum = Math.floor(Math.random() * allMemeImgs.length)\r\n        setrandomImg(allMemeImgs[randNum].url )\r\n        setaltText( allMemeImgs[randNum].name )\r\n        setNoOfClick(0)\r\n    })\r\n\r\n    // function to check if the checkboxes to disable the text columns are checked\r\n    const handleChange=((e)=>{\r\n        if(e.target.name===\"topChecked\"){\r\n            settopChecked(e.target.checked)\r\n            topInputRef.current.disabled = !topInputRef.current.disabled\r\n            settopText(\"\")\r\n        }\r\n\r\n        if (e.target.name === \"bottomChecked\") {\r\n            setbottomChecked(e.target.checked)\r\n            bottomInputRef.current.disabled = !bottomInputRef.current.disabled\r\n            setbottomText(\"\")     \r\n        }\r\n        setNoOfClick(0)\r\n    })\r\n\r\n    //function to generate the download button \r\n    const downloadBtn = (() =>{\r\n        if(canvasRef.current.height > 0){\r\n            setNoOfClick(noOfClick => noOfClick + 1)\r\n        }\r\n    })   \r\n    const handleGenDownload = ((e) =>{\r\n        downloadBtn()\r\n        e.preventDefault()\r\n        var canvas = canvasRef.current\r\n        var img = new Image()\r\n        img.src = randomImg\r\n        img.crossOrigin = \"anonymous\"\r\n        canvas.height = img.height\r\n        canvas.width = img.width\r\n        var context = canvas.getContext(\"2d\")\r\n        context.drawImage(img, 0, 0);\r\n        context.font = \"25px VT323\";\r\n        context.fillStyle = 'white'; \r\n        context.textAlign = 'center';\r\n\r\n        if (topText !== \"\") {\r\n            const upLines = getLines(context, topText, img.width)\r\n            for (var i = 0; i < upLines.length; i++) {\r\n                context.fillText(upLines[i], img.width / 2, (i + 1) * 24)\r\n            }\r\n        }\r\n\r\n        if (bottomText !== \"\") {\r\n            const downLines = getLines(context, bottomText, img.width)\r\n            for (i = 0; i < downLines.length; i++) {\r\n                context.fillText(downLines[i], img.width / 2, ((img.height - 50) + ((i + 1) * 24)))\r\n            }\r\n        }\r\n        const image = canvas.toDataURL(\"image/png\")\r\n\r\n        \r\n        const link = linkRef.current\r\n        link.href = image\r\n        link.download = altText\r\n    \r\n       \r\n        if(canvas.height===0 || canvas.height <= 0){\r\n            console.log(img.height)\r\n            downloadRef.current.click()\r\n            return\r\n        }\r\n    \r\n        link.click()\r\n\r\n    })\r\n\r\n    useEffect(()=>{\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n            .then(res => res.json())\r\n            .then(res => setallMemeImgs(res.data.memes))\r\n    },[])\r\n    const hasMemes=allMemeImgs.length>0\r\n\r\n    const handleText = ((e) => {\r\n        if(e.target.name === \"topText\"){\r\n            settopText(e.target.value)\r\n        }\r\n        if (e.target.name === \"bottomText\") {\r\n            setbottomText(e.target.value)\r\n        }\r\n        setNoOfClick(0)\r\n    })\r\n    return(<div>\r\n            {hasMemes ?\r\n             <div>    \r\n                <form className=\"meme-form\">\r\n                    <input\r\n                        ref={topInputRef}\r\n                        type=\"text\"\r\n                        name=\"topText\"\r\n                        placeholder=\"Top Text\"\r\n                        value={topText}\r\n                    onChange={handleText} />\r\n                    <input\r\n                        ref={bottomInputRef}\r\n                        type=\"text\"\r\n                        name=\"bottomText\"\r\n                        placeholder=\"Bottom Text\"\r\n                        value={bottomText}\r\n                    onChange={handleText} />\r\n                    <button onClick={handleGen}>Gen</button>\r\n                </form>\r\n                <div className=\"meme\">\r\n                    <div>\r\n                        <img ref = {imgRef}\r\n                        src = {randomImg} \r\n                        alt = {altText} \r\n                        height = {640}\r\n                        width = {640}/>\r\n                        <h2 className=\"top\">{topText}</h2>\r\n                        <h2 className=\"bottom\">{bottomText}</h2>\r\n                    </div>\r\n                    <div>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            name=\"topChecked\"\r\n                            checked={topChecked}\r\n                            onChange={handleChange}\r\n                        /><label>Upper Text?</label>   \r\n                        <input\r\n                            type=\"checkbox\"\r\n                            name=\"bottomChecked\"\r\n                            checked={bottomChecked}\r\n                            onChange={handleChange}\r\n                        /><label>Lower Text?</label>\r\n                    </div>\r\n                    <div>\r\n                        <button ref={downloadRef} onClick={handleGenDownload}> {noOfClick >= 1 ? \"Download Image\" : \"Gen Image\"}</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"dowaload-div\"> \r\n                    <canvas ref={canvasRef}\r\n                    ></canvas>\r\n                    <a ref={linkRef} href=\"none\">{}</a>\r\n                </div>\r\n        </div> :\"Loading...\"} </div>)\r\n})\r\n\r\nexport default MemeGenerator","import React from \"react\"\nimport Header from \"./Header\"\nimport MemeGenerator  from \"./MemeGenerator\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <MemeGenerator/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n;\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}